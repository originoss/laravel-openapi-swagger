{
    "openapi": "3.0.3",
    "info": {
        "title": "Laravel OpenAPI Demo API",
        "version": "1.0.0",
        "description": null,
        "contact": {
            "name": null,
            "email": null,
            "url": null
        }
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Development server"
        }
    ],
    "paths": {
        "/api/tasks": {
            "get": {
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "Page number for pagination.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": [],
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "required": false,
                        "description": "Number of tasks per page.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                15
                            ],
                            "enum": [],
                            "default": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "description": "Filter tasks by status.",
                        "schema": {
                            "type": "string",
                            "required": [],
                            "examples": [],
                            "enum": [
                                "pending",
                                "in-progress",
                                "completed"
                            ]
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "A paginated list of tasks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [],
                                    "examples": [],
                                    "enum": [],
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Task"
                                            }
                                        },
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "List all tasks",
                "description": "Retrieves a paginated list of tasks, optionally filtered by status.",
                "tags": [
                    "Tasks"
                ],
                "operationId": "tasksIndex"
            },
            "post": {
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "Task object to be created. `id`, `created_at`, `updated_at` are ignored.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Task"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "summary": "Create a new task",
                "description": "Adds a new task to the to-do list.",
                "tags": [
                    "Tasks"
                ],
                "operationId": "tasksStore"
            }
        },
        "/api/tasks/{task}": {
            "get": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the task to retrieve.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": [],
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "The requested task.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found."
                    }
                },
                "summary": "Get a specific task",
                "description": "Retrieves a single task by its ID.",
                "tags": [
                    "Tasks"
                ],
                "operationId": "tasksShow"
            },
            "put": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the task to update.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": [],
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "Task object with updated fields. `id`, `created_at`, `updated_at` are ignored. All fields are optional for partial updates.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Task"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "summary": "Update an existing task",
                "description": "Updates an existing task by its ID.",
                "tags": [
                    "Tasks"
                ],
                "operationId": "tasksUpdate"
            },
            "delete": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the task to delete.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "204": {
                        "description": "Task deleted successfully (No Content)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                },
                "summary": "Delete a task",
                "description": "Deletes a task by its ID.",
                "tags": [
                    "Tasks"
                ],
                "operationId": "tasksDestroy"
            }
        },
        "/api/users": {
            "get": {
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "Page number for pagination.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "A paginated list of users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [],
                                    "examples": [],
                                    "enum": [],
                                    "properties": {
                                        "unnamed": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "List all users",
                "description": "Retrieves a paginated list of users.",
                "tags": [
                    "Users"
                ],
                "operationId": "usersIndex"
            }
        },
        "/api/users/{user}": {
            "get": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the user to retrieve.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "The requested user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found."
                    }
                },
                "summary": "Get a specific user",
                "description": "Retrieves a single user by their ID.",
                "tags": [
                    "Users"
                ],
                "operationId": "usersShow"
            }
        },
        "/api/products": {
            "get": {
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "Page number for pagination.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "required": false,
                        "description": "Number of products per page.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                15
                            ],
                            "enum": []
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "description": "Filter products by category.",
                        "schema": {
                            "type": "string",
                            "required": [],
                            "examples": [],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "A paginated list of products.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [],
                                    "examples": [],
                                    "enum": []
                                }
                            }
                        }
                    }
                },
                "summary": "List all products",
                "description": "Retrieves a paginated list of products, optionally filtered by category.",
                "tags": [
                    "Products"
                ],
                "operationId": "productsIndex"
            },
            "post": {
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "Product object to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "summary": "Create a new product",
                "description": "Adds a new product to the catalog.",
                "tags": [
                    "Products"
                ],
                "operationId": "productsStore"
            }
        },
        "/api/products/{product}": {
            "get": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the product to retrieve.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "200": {
                        "description": "The requested product.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found."
                    }
                },
                "summary": "Get a specific product",
                "description": "Retrieves a single product by its ID.",
                "tags": [
                    "Products"
                ],
                "operationId": "productsShow"
            },
            "put": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the product to update.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "Product object with updated fields.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "summary": "Update an existing product",
                "description": "Updates an existing product by its ID.",
                "tags": [
                    "Products"
                ],
                "operationId": "productsUpdate"
            },
            "delete": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the product to delete.",
                        "schema": {
                            "type": "integer",
                            "required": [],
                            "examples": [
                                1
                            ],
                            "enum": []
                        }
                    }
                ],
                "requestBody": null,
                "responses": {
                    "204": {
                        "description": "Product deleted successfully (No Content)."
                    },
                    "404": {
                        "description": "Product not found."
                    }
                },
                "summary": "Delete a product",
                "description": "Deletes a product by its ID.",
                "tags": [
                    "Products"
                ],
                "operationId": "productsDestroy"
            }
        }
    },
    "components": {
        "schemas": {
            "Product": {
                "type": "object",
                "title": "Product",
                "description": "Represents a product in the store.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product.",
                        "example": "Smartphone XYZ",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the product.",
                        "example": "The latest smartphone with amazing features",
                        "nullable": true
                    },
                    "price": {
                        "type": "number",
                        "description": "Price of the product in USD.",
                        "format": "float",
                        "example": 999.99,
                        "minimum": 0.01
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the product.",
                        "example": "Electronics",
                        "nullable": true
                    },
                    "in_stock": {
                        "type": "boolean",
                        "description": "Whether the product is in stock.",
                        "example": true,
                        "default": true
                    },
                    "specifications": {
                        "type": "object",
                        "description": "Technical specifications of the product.",
                        "nullable": true
                    },
                    "images": {
                        "type": "array",
                        "description": "Product images.",
                        "nullable": true,
                        "items": {
                            "type": "object"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the product.",
                        "format": "int64",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Timestamp when the product was created.",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Timestamp when the product was last updated.",
                        "format": "date-time",
                        "example": "2023-01-01T13:30:00Z"
                    },
                    "specifications.weight": {
                        "type": "string",
                        "example": "200g"
                    },
                    "specifications.dimensions": {
                        "type": "string",
                        "example": "15 x 7 x 0.8 cm"
                    },
                    "specifications.color": {
                        "type": "string",
                        "example": "Black"
                    },
                    "images.url": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com/images/product1.jpg"
                    },
                    "images.is_primary": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "price"
                ]
            },
            "User": {
                "type": "object",
                "title": "User",
                "description": "Represents a user in the system.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name",
                        "example": "Example User"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email",
                        "example": "user@example.com",
                        "format": "email"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "email_verified_at": {
                        "type": "string",
                        "description": "Email verified at",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "email"
                ]
            },
            "Task": {
                "type": "object",
                "title": "Task",
                "description": "Represents a task item in the to-do list.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the task.",
                        "format": "int64",
                        "example": 1
                    },
                    "title": {
                        "type": "string",
                        "description": "Title or name of the task.",
                        "example": "Buy groceries",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the task.",
                        "example": "Milk, Eggs, Bread, and Cheese",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the task.",
                        "example": "pending",
                        "default": "pending",
                        "enum": [
                            "pending",
                            "in-progress",
                            "completed"
                        ]
                    },
                    "due_date": {
                        "type": "string",
                        "description": "Due date for the task.",
                        "format": "date",
                        "example": "2024-12-31",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Timestamp when the task was created.",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Timestamp when the task was last updated.",
                        "format": "date-time",
                        "example": "2023-01-01T13:30:00Z"
                    }
                },
                "required": [
                    "id",
                    "title",
                    "status"
                ]
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "passport": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "/oauth/authorize",
                        "tokenUrl": "/oauth/token",
                        "scopes": []
                    }
                }
            }
        },
        "parameters": {
            "page": {
                "name": "page",
                "in": "query",
                "description": "Page number for pagination",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                }
            },
            "per_page": {
                "name": "per_page",
                "in": "query",
                "description": "Number of items per page",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 15,
                    "minimum": 1,
                    "maximum": 100
                }
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "description": "Field to sort by, prefix with - for descending order",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "-created_at"
                }
            }
        },
        "responses": {
            "Unauthorized": {
                "description": "Authentication credentials were missing or invalid",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Unauthenticated."
                                }
                            }
                        }
                    }
                }
            },
            "Forbidden": {
                "description": "The user does not have the necessary permissions",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "This action is unauthorized."
                                }
                            }
                        }
                    }
                }
            },
            "NotFound": {
                "description": "The specified resource was not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Resource not found."
                                }
                            }
                        }
                    }
                }
            },
            "ValidationError": {
                "description": "The request was invalid",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "The given data was invalid."
                                },
                                "errors": {
                                    "type": "object",
                                    "example": {
                                        "field_name": [
                                            "The field name is required."
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "security": [
        {
            "sanctum": []
        },
        {
            "passport": [
                "read",
                "create"
            ]
        }
    ],
    "tags": [
        {
            "name": "Tasks",
            "description": "Task management endpoints"
        },
        {
            "name": "Users",
            "description": "User management endpoints"
        },
        {
            "name": "Products",
            "description": "Product management endpoints"
        }
    ]
}